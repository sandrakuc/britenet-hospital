@isTest
private class DoctorManaginMethodsTestSuite {
	
    @isTest static void addDoctorTest(){
    	Decimal id = 1;
    	String name = 'John';
    	String surname = 'Smith';
    	String title = 'Sample Title';
    	String licenseNumber = '2345678';
    	String position = 'Sample Position';
    	String department = 'Sample Department';
    	Boolean supervisor = false;
    	String workPhone = '0-700-880-771';
    	String privatePhone = '0-666-997-112';
    	String email = 'john@smith.com';
    	String country = 'Polska';
    	String town = 'Kozia wolka';
    	String street = 'Wielka';
    	Decimal streetNumber = 21;
    	Decimal houseNumber = 37;
    	String postalCode = '33-456';
    	Boolean isAvailable = true;
    	Date availableDate = Date.newInstance(2019, 9, 23);
    	String status = 'Sample';
    	Boolean partTime = false;
    	Boolean homeConsult = true;
    	DoctorManaging.addDoctor(id, name, surname, title, licenseNumber, position, department, supervisor, workPhone, privatePhone, email, country, town, street, streetNumber, houseNumber, postalCode, isAvailable, availableDate, status, partTime, homeConsult);
    	List<Doctor__c> doctors = [select id__c, surname__c, name__c, title__c, licenseNumber__c, position__c, department__c, workPhone__c, privatePhone__c, eMail__c, country__c, street__c, streetNumber__c, houseNumber__c, postalCode__c, isAvailable__c, availableDate__c, status__c, partTime__c, homeConsult__c from Doctor__c where id__c = :id limit 1];
    	System.assert(!doctors.isEmpty());
    	Doctor__c doctor = doctors[0];
    	System.assert(doctor != null);
    	System.assertEquals(doctor.id__c, id);
    	System.assertEquals(doctor.name__c, name);
    	System.assertEquals(doctor.surname__c, surname);
    	System.assertEquals(doctor.title__c, title);
    	System.assertEquals(doctor.licenseNumber__c, licenseNumber);
    	System.assertEquals(doctor.workPhone__c, workPhone);
    	System.assertEquals(doctor.privatePhone__c, privatePhone);
    	System.assertEquals(doctor.eMail__c, email);
    	System.assertEquals(doctor.country__c, country);
    	System.assertEquals(doctor.street__c, street);
    	System.assertEquals(doctor.streetNumber__c, streetNumber);
    	System.assertEquals(doctor.houseNumber__c, houseNumber);
    	System.assertEquals(doctor.postalCode__c, postalCode);
    	System.assertEquals(doctor.isAvailable__c, isAvailable);
    	System.assertEquals(doctor.availableDate__c, availableDate);
    	System.assertEquals(doctor.status__c, status);
    	System.assertEquals(doctor.partTime__c, partTime);
    	System.assertEquals(doctor.homeConsult__c, homeConsult);
    }
    
    @isTest static void updateDoctorTest(){
    	Decimal id = 1;
    	String name = 'John';
    	String surname = 'Smith';
    	String title = 'Sample Title';
    	String licenseNumber = '2345678';
    	String position = 'Sample Position';
    	String department = 'Sample Department';
    	Boolean supervisor = false;
    	String workPhone = '0-700-880-771';
    	String privatePhone = '0-666-997-112';
    	String email = 'john@smith.com';
    	String country = 'Polska';
    	String town = 'Kozia wolka';
    	String street = 'Wielka';
    	Decimal streetNumber = 21;
    	Decimal houseNumber = 37;
    	String postalCode = '33-456';
    	Boolean isAvailable = true;
    	Date availableDate = Date.newInstance(2019, 9, 23);
    	String status = 'Sample';
    	Boolean partTime = false;
    	Boolean homeConsult = true;
    	DoctorManaging.addDoctor(id, name, surname, title, licenseNumber, position, department, supervisor, workPhone, privatePhone, email, country, town, street, streetNumber, houseNumber, postalCode, isAvailable, availableDate, status, partTime, homeConsult);
    	Decimal id2 = 1;
    	String name2 = 'John2';
    	String surname2 = 'Smith2';
    	String title2 = 'Sample Title2';
    	String licenseNumber2 = '2345672';
    	String position2 = 'Sample';
    	String department2 = 'Sample Department2';
    	Boolean supervisor2 = false;
    	String workPhone2 = '0-700-880-772';
    	String privatePhone2 = '0-666-997-113';
    	String email2 = 'john@smith2.com';
    	String country2 = 'Polska';
    	String town2 = 'Kozia wolka';
    	String street2 = 'Wielka';
    	Decimal streetNumber2 = 21;
    	Decimal houseNumber2 = 37;
    	String postalCode2 = '33-456';
    	Boolean isAvailable2 = true;
    	Date availableDate2 = Date.newInstance(2019, 9, 23);
    	String status2 = 'Sample';
    	Boolean partTime2 = false;
    	Boolean homeConsult2 = true;
    	DoctorManaging.updateDoctor(id2, name2, surname2, title2, licenseNumber2, position2, department2, supervisor2, workPhone2, privatePhone2, email2, country2, town2, street2, streetNumber2, houseNumber2, postalCode2, isAvailable2, availableDate2, status2, partTime2, homeConsult2);
    	List<Doctor__c> doctors = [select id__c, surname__c, name__c, title__c, licenseNumber__c, position__c, department__c, workPhone__c, privatePhone__c, eMail__c, country__c, street__c, streetNumber__c, houseNumber__c, postalCode__c, isAvailable__c, availableDate__c, status__c, partTime__c, homeConsult__c from Doctor__c where id__c = :id2 limit 1];
    	System.assert(!doctors.isEmpty());
    	Doctor__c doctor = doctors[0];
    	System.assert(doctor != null);
    	System.assertEquals(doctor.id__c, id2);
    	System.assertEquals(doctor.name__c, name2);
    	System.assertEquals(doctor.surname__c, surname2);
    	System.assertEquals(doctor.title__c, title2);
    	System.assertEquals(doctor.licenseNumber__c, licenseNumber2);
    	System.assertEquals(doctor.workPhone__c, workPhone2);
    	System.assertEquals(doctor.privatePhone__c, privatePhone2);
    	System.assertEquals(doctor.eMail__c, email2);
    	System.assertEquals(doctor.country__c, country2);
    	System.assertEquals(doctor.street__c, street2);
    	System.assertEquals(doctor.streetNumber__c, streetNumber2);
    	System.assertEquals(doctor.houseNumber__c, houseNumber2);
    	System.assertEquals(doctor.postalCode__c, postalCode2);
    	System.assertEquals(doctor.isAvailable__c, isAvailable2);
    	System.assertEquals(doctor.availableDate__c, availableDate2);
    	System.assertEquals(doctor.status__c, status2);
    	System.assertEquals(doctor.partTime__c, partTime2);
    	System.assertEquals(doctor.homeConsult__c, homeConsult2);
    }
    
    @isTest static void deleteDoctorTest(){
    	Decimal id = 1;
    	String name = 'John';
    	String surname = 'Smith';
    	String title = 'Sample Title';
    	String licenseNumber = '2345678';
    	String position = 'Sample Position';
    	String department = 'Sample Department';
    	Boolean supervisor = false;
    	String workPhone = '0-700-880-771';
    	String privatePhone = '0-666-997-112';
    	String email = 'john@smith.com';
    	String country = 'Polska';
    	String town = 'Kozia wolka';
    	String street = 'Wielka';
    	Decimal streetNumber = 21;
    	Decimal houseNumber = 37;
    	String postalCode = '33-456';
    	Boolean isAvailable = true;
    	Date availableDate = Date.newInstance(2019, 9, 23);
    	String status = 'Sample';
    	Boolean partTime = false;
    	Boolean homeConsult = true;
    	DoctorManaging.addDoctor(id, name, surname, title, licenseNumber, position, department, supervisor, workPhone, privatePhone, email, country, town, street, streetNumber, houseNumber, postalCode, isAvailable, availableDate, status, partTime, homeConsult);
    	DoctorManaging.deleteDoctor(id);
    	List<Doctor__c> doctors = [select id__c, surname__c, name__c, title__c, licenseNumber__c, position__c, department__c, workPhone__c, privatePhone__c, eMail__c, country__c, street__c, streetNumber__c, houseNumber__c, postalCode__c, isAvailable__c, availableDate__c, status__c, partTime__c, homeConsult__c from Doctor__c where id__c = :id limit 1];
    	System.assert(doctors.isEmpty());
    }
}